{
  "pay_by_link": {
    "created_at": "2021-05-13T01:01:43-08:00",
    "currency": "EUR",
    "amount": 3000,
    "description": "Abonament na siłownię",
    "bank": "mbank"
  },
  "dp": {
    "created_at": "2021-05-14T08:27:09Z",
    "currency": "USD",
    "amount": 599,
    "description": "FastFood",
    "iban": "DE91100000000123456789"
  },
  "card": {
    "created_at": "2021-05-13T09:00:05+02:00",
    "currency": "PLN",
    "amount": 2450,
    "description": "REF123457",
    "cardholder_name": "John",
    "cardholder_surname": "Doe",
    "card_number": "2222222222222222"
  }
}


{
  "pay_by_link": [
    {
      "created_at": "2021-05-13T01:01:43-08:00",
      "currency": "EUR",
      "amount": 3000,
      "description": "Abonament na siłownię",
      "bank": "mbank"
    }
  ],
  "dp": [
    {
      "created_at": "2021-05-14T08:27:09Z",
      "currency": "USD",
      "amount": 599,
      "description": "FastFood",
      "iban": "DE91100000000123456789"
    }
  ],
  "card": [
    {
      "created_at": "2021-05-13T09:00:05+02:00",
      "currency": "PLN",
      "amount": 2450,
      "description": "REF123457",
      "cardholder_name": "John",
      "cardholder_surname": "Doe",
      "card_number": "2222222222222222"
    },
    {
      "created_at": "2021-05-14T18:32:26Z",
      "currency": "GBP",
      "amount": 1000,
      "description": "REF123456",
      "cardholder_name": "John",
      "cardholder_surname": "Doe",
      "card_number": "1111111111111111"
    }
  ]
}

{
  "pay_by_link": [
    {
      "customer_id": 1,
      "created_at": "2021-05-13T01:01:43-08:00",
      "currency": "EUR",
      "amount": 3000,
      "description": "Abonament na siłownię",
      "bank": "mbank"
    }
  ],
  "dp": [
    {
      "customer_id": 1,
      "created_at": "2021-05-14T08:27:09Z",
      "currency": "USD",
      "amount": 599,
      "description": "FastFood",
      "iban": "DE91100000000123456789"
    }
  ],
  "card": [
    {
      "customer_id": 1,
      "created_at": "2021-05-13T09:00:05+02:00",
      "currency": "PLN",
      "amount": 2450,
      "description": "REF123457",
      "cardholder_name": "John",
      "cardholder_surname": "Doe",
      "card_number": "2222222222222222"
    },
    {
      "customer_id": 1,
      "created_at": "2021-05-14T18:32:26Z",
      "currency": "GBP",
      "amount": 1000,
      "description": "REF123456",
      "cardholder_name": "John",
      "cardholder_surname": "Doe",
      "card_number": "1111111111111111"
    }
  ]
}

CREATE TABLE PayByLink (
    PayByLinkID INTEGER       PRIMARY KEY AUTOINCREMENT
                              NOT NULL,
    CustomerID  INTEGER       NOT NULL,
    CreatedAt   VARCHAR (30)  NOT NULL,
    Currency    VARCHAR (3)   NOT NULL,
    Amount      INTEGER       NOT NULL,
    Description TEXT,
    Bank        VARCHAR (255) NOT NULL
);


def card_requester(card_array, add_to_database = False):
    for i in range(len(card_array)):
        card = card_array[i]

        if add_to_database:
            # add to database

        exchange_rate = get_exchange_rate(card.currency, card.created_at)
        utc_date = get_utc_time(card.created_at, app.date_format)
        try:
            int(card.card_number)
            converted_card = {}
            if card.customer_id:
                converted_card["customer_id"] = card.customer_id

            converted_card.update({
                    "date": utc_date,
                    "type": "card",
                    "payment_mean": f"{card.cardholder_name.title()} {card.cardholder_surname.title()}"
                                    f" {card.card_number[:4] + 8 * '*' + card.card_number[-4:]}",
                    "description": card.description,
                    "currency": card.currency.upper(),
                    "amount": card.amount,
                    "amount_in_pln": (int(card.amount) * exchange_rate) // 1,
            })

            app.last_payment_info.append(converted_card)
        except:
            raise HTTPException(status_code=400)